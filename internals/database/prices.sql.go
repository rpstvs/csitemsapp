// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: prices.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getBestItems = `-- name: GetBestItems :many
SELECT Item_id,
    Price,
    Items.ItemName
FROM Prices
    LEFT JOIN Items ON Prices.Item_id = Items.Id
ORDER BY Price DESC,
    PriceDate DESC
LIMIT 5
`

type GetBestItemsRow struct {
	ItemID   uuid.UUID
	Price    float64
	Itemname sql.NullString
}

func (q *Queries) GetBestItems(ctx context.Context) ([]GetBestItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBestItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBestItemsRow
	for rows.Next() {
		var i GetBestItemsRow
		if err := rows.Scan(&i.ItemID, &i.Price, &i.Itemname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPricebyID = `-- name: GetPricebyID :one
SELECT Price
FROM Prices
WHERE Item_id = $1
`

func (q *Queries) GetPricebyID(ctx context.Context, itemID uuid.UUID) (float64, error) {
	row := q.db.QueryRowContext(ctx, getPricebyID, itemID)
	var price float64
	err := row.Scan(&price)
	return price, err
}
